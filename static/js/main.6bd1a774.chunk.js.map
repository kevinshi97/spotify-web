{"version":3,"sources":["components/library/authenticator.ts","components/library/enums/enums.ts","components/library/spotify-adapter.ts","components/library/colors/colors.tsx","components/chart-area/ChartArea.tsx","components/graph-area/GraphArea.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Authenticator","client_id","redirect_uri","scopes","state","this","generateRandomString","auth_url","encodeURIComponent","access_token","token_type","expires_in","returned_state","stored_state","url_params","URLSearchParams","window","location","hash","replace","get","localStorage","getItem","setItem","href","length","text","possible","i","charAt","Math","floor","random","_instance","TimeRange","Passport","Instance","SpotifyAdapter","app","logIn","limit","offset","time_range","medium_term","console","log","url","params","headers","method","fetch","then","res","json","data","tracks","items","setState","curr_track","id","uri","split","pop","encodeURI","audio_features","curr_audio_features","isLoggedIn","dark_node_color","background","border","highlight","dark_font_color","color","dark_edge_color","node_color","font_color","edge_color","ChartArea","props","dark","track","className","src","image","alt","target","rel","name","dataKey","angle","domain","tick","stroke","fill","fillOpacity","scaleToFit","preview_url","allowTransparency","allow","external_urls","spotify","album","images","updateChartArea","prevProps","prevState","tempo","valence","danceability","acousticness","Component","GraphArea","nodes","edges","push","label","title","shape","font","to","from","first","graph","options","layout","improvedLayout","hierarchical","interaction","zoomView","width","height","events","selectNode","event","_updateCurrTrack","getNetwork","network","getAudioFeature","setData","redraw","App","changeTheme","loggedIn","query_top_limit","query_top_offset","query_top_timerange","short_term","appGraphArea","icon","faAdjust","onClick","adapter","getTopTracks","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6bd1a774.chunk.js","sourcesContent":["class Authenticator {\r\n  /**\r\n   * params to make authentication request\r\n   */\r\n  private static _instance: Authenticator;\r\n  private client_id: string = '287daee6bafd4ce48e000a00a40d3f6f';\r\n  // private redirect_uri: string = 'http://935b2ca9619d.ngrok.io';\r\n  private redirect_uri: string = 'http://kevinshi97.github.io/spotify-web';\r\n  private scopes: string = 'user-top-read user-follow-read user-library-read';\r\n  private state: string = this.generateRandomString(16);\r\n  private auth_url: string = 'https://accounts.spotify.com/authorize?response_type=token&client_id=' + encodeURIComponent(this.client_id)\r\n    + '&redirect_uri=' + encodeURIComponent(this.redirect_uri) + '&state=' + encodeURIComponent(this.state)\r\n    + '&scope=' + encodeURIComponent(this.scopes);\r\n  \r\n  /**\r\n   * params returned by authentication, may be used in the remaing API calls\r\n   */\r\n  public access_token: string | null = null;\r\n  public token_type: string | null = null;\r\n  public expires_in: string | null = null;\r\n  public returned_state: string | null = null;\r\n  public stored_state: string | null = null;\r\n  \r\n  private constructor() {\r\n    let url_params = new URLSearchParams(window.location.hash.replace(\"#\",\"?\"))\r\n    this.access_token = url_params.get('access_token');\r\n    this.token_type = url_params.get('token_type');\r\n    this.expires_in = url_params.get('expires_in');\r\n    this.returned_state = url_params.get('state');\r\n    this.stored_state = localStorage.getItem('spotify_auth_state')\r\n  }\r\n\r\n  public static get Instance(): Authenticator {\r\n    return this._instance || (this._instance = new this()); \r\n  }\r\n\r\n  public get isLoggedIn(): Boolean {\r\n    return (this.access_token && this.stored_state === this.returned_state) || false;\r\n  }\r\n\r\n  public logIn(): void {\r\n    localStorage.setItem('spotify_auth_state', this.state)\r\n    window.location.href = this.auth_url;\r\n  }\r\n\r\n  private generateRandomString(length: number): string {\r\n    let text: string = '';\r\n    var possible: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  \r\n    for (let i: number = 0; i < length; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  };\r\n\r\n}\r\n\r\nexport const Passport = Authenticator.Instance;","export enum TimeRange {\r\n  short_term = 'short_term',\r\n  medium_term = 'medium_term',\r\n  long_term = 'long_term'\r\n}","import {Component} from 'react';\r\n\r\nimport { Passport } from './authenticator';\r\nimport { IProps, IState} from './interfaces/IApp';\r\nimport { TimeRange } from './enums/enums';\r\nimport { Artist } from './interfaces/IArtist';\r\nimport { Track, AudioFeatures } from './interfaces/ISpotifyObjects';\r\n\r\nexport class SpotifyAdapter {\r\n  public access_token: string | null = null;\r\n  public token_type: string | null = null;\r\n  public expires_in: string | null = null;\r\n  public returned_state: string | null = null;\r\n  public stored_state: string | null = null;\r\n  private app: Component<IProps, IState>;\r\n\r\n  constructor(app: Component<IProps, IState>) {\r\n    this.app = app;\r\n    this.access_token = Passport.access_token;\r\n    this.token_type = Passport.token_type;\r\n    this.expires_in = Passport.expires_in;\r\n    this.returned_state = Passport.returned_state;\r\n    this.stored_state = Passport.stored_state;\r\n  }\r\n\r\n  public get isLoggedIn(): Boolean {\r\n    return Passport.isLoggedIn;\r\n  }\r\n  public logIn(): void {\r\n    Passport.logIn();\r\n  }\r\n\r\n  public getTopTracks(limit: number = 20, offset: number = 0, time_range: TimeRange = TimeRange.medium_term): void {\r\n    if (limit < 1 || limit > 50 || offset < 0 || offset > limit) {\r\n      console.log('invalid params');\r\n    } else {\r\n      const url = 'https://api.spotify.com/v1/me/top/tracks?&limit=' + encodeURIComponent(limit) + '&offset=' + encodeURIComponent(offset) + '&time_range='\r\n        + encodeURIComponent(time_range);\r\n      const params: RequestInit = {\r\n        headers: {'Authorization': 'Bearer ' + this.access_token} as HeadersInit, \r\n        method: 'GET',\r\n      }\r\n      fetch(url, params)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n          const tracks = data.items as Track[]\r\n          this.app.setState({ tracks: tracks, curr_track: tracks[0] || null})\r\n          console.log(this.app.state.tracks);\r\n          console.log(this.app.state.curr_track);\r\n      })\r\n    }\r\n  }\r\n\r\n  public getAudioFeature(curr_track: Track): void {\r\n    const id: string = curr_track.uri.split(':').pop() || '';\r\n    console.log(id);\r\n    const url = 'https://api.spotify.com/v1/audio-features/'+encodeURI(id);\r\n    const params: RequestInit = {\r\n      headers: {'Authorization': 'Bearer ' + this.access_token} as HeadersInit, \r\n      method: 'GET',\r\n    }\r\n    fetch(url, params)\r\n      .then(res => res.json())\r\n      .then((data) => {\r\n        const audio_features = data as AudioFeatures\r\n        console.log(audio_features);\r\n        this.app.setState({ curr_audio_features: audio_features });\r\n        // console.log(this.app.state.curr_audio_features);\r\n    })\r\n  }\r\n}","import { Color } from 'vis';\r\n\r\n// Graph Colors\r\n\r\nexport const dark_node_color: Color = {\r\n  background: '#89CFF0',\r\n  border: '#187795',\r\n  highlight: {\r\n    background: '#002387',\r\n    border: '#318CE7'\r\n  }\r\n};\r\n\r\nexport const dark_font_color = {\r\n  color: '#ffffff',\r\n};\r\n\r\nexport const dark_edge_color = {\r\n  color: '#ffffff',\r\n  highlight: '#97EFE9'\r\n}\r\n\r\nexport const node_color: Color = {\r\n  background: '#002387',\r\n  border: '#318CE7',\r\n  highlight: {\r\n    background: '#89CFF0',\r\n    border: '#187795'\r\n  }\r\n}\r\n\r\nexport const font_color = {\r\n  color: '#000000',\r\n};\r\n\r\nexport const edge_color = {\r\n  color: '#000000',\r\n  highlight: '#97EFE9'\r\n}\r\n\r\n\r\n//Chart Colors \r\nexport const chart_color = '#002387'\r\nexport const dark_chart_color = '#89CFF0'","import { RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Legend, ResponsiveContainer, Text} from 'recharts';\r\nimport React, {Component} from 'react';\r\nimport { IChartAreaProps, IChartAreaState } from '../library/interfaces/IApp';\r\nimport {chart_color, dark_chart_color } from '../library/colors/colors';\r\nimport './ChartArea.css';\r\n\r\nexport class ChartArea extends Component<IChartAreaProps, IChartAreaState> {\r\n  constructor(props: IChartAreaProps) {\r\n    super(props);\r\n    this.state = {\r\n      dark: this.props.dark,\r\n      audio_features: this.props.audio_features,\r\n      track: this.props.track,\r\n    }\r\n  }\r\n  render() {\r\n    let color = this.state.dark ? dark_chart_color : chart_color; \r\n    return (\r\n      <div className='info-container'>\r\n        <div className='song-container'>\r\n          <img src={this.state.image} className='album-logo' alt='logo' />\r\n          <a className='title App-link' href={this.state.url} target='_blank' rel='noopener noreferrer'>{this.state.name}</a>        \r\n        </div>\r\n        <div className='chart-container'>\r\n          <ResponsiveContainer>\r\n            <RadarChart data={this.state.data}>\r\n              <PolarGrid />\r\n              <PolarAngleAxis dataKey='feature' />\r\n              <PolarRadiusAxis angle={18} domain={[0, 1]} tick={false}/>\r\n              <Radar name={this.props.track ? this.props.track.name : ''}\r\n                dataKey='A' stroke={color} fill={color} fillOpacity={0.6} />\r\n              {/* <Legend /> */}\r\n              <Text scaleToFit={true}/>\r\n            </RadarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        <div className='player-container'>\r\n          <iframe id={'player'} src={this.state.track?.preview_url} allowTransparency={true} allow='encryted-media' />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.track) {\r\n      if (this.props.track.external_urls && this.props.track.name) {\r\n        this.setState({ name: this.props.track.name, url: this.props.track.external_urls.spotify || '#', track: this.props.track});\r\n      }\r\n      if (this.props.track.album.images) {\r\n        this.setState({ image: this.props.track.album.images[0].url });\r\n      }\r\n    }\r\n    if (this.props.audio_features) {\r\n      this.updateChartArea()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IChartAreaProps, prevState: IChartAreaState) {\r\n    if (this.props.track && this.props.track !== prevProps.track) {\r\n      if (this.props.track.external_urls && this.props.track.name) {\r\n        this.setState({ name: this.props.track.name, url: this.props.track.external_urls.spotify || '#', track: this.props.track});\r\n      }\r\n      if (this.props.track.album.images) {\r\n        this.setState({ image: this.props.track.album.images[0].url });\r\n      }\r\n    }\r\n    if (this.props.dark && this.props.dark != prevProps.dark) {\r\n      this.setState({ dark: this.props.dark });\r\n    }\r\n    if (this.props.audio_features && this.props.audio_features !== prevProps.audio_features) {\r\n      this.updateChartArea()\r\n    }\r\n  }\r\n\r\n  public updateChartArea() {\r\n    // const major: number = this.props.audio_features?.mode || 0\r\n    // const bpm: number = this.props.audio_features?.tempo || 0\r\n    const tempo = this.props.audio_features?.tempo || 0\r\n    // const nchords: number = 3 //idk how to get the chords, this was a wash :/\r\n    // const nchords: number = this.props.audio_features?.key || 0\r\n    // const upbeatness: number = (60 + Math.pow(0.00165 * bpm - 120, 2) + (4.376 * major) + (0.78 * nchords) - (major * nchords)) / 100\r\n    const data = [\r\n      { 'feature': 'valence', 'A': this.props.audio_features?.valence, 'fullMark': 1 },\r\n      { 'feature': 'danceability', 'A': this.props.audio_features?.danceability, 'fullMark': 1 },\r\n      { 'feature': 'energy', 'A': this.props.audio_features?.danceability, 'fullMark': 1 },\r\n      { 'feature': 'acousticness', 'A': this.props.audio_features?.acousticness, 'fullMark': 1 },\r\n      { 'feature': 'tempo', 'A': tempo/250, 'fullMark': 1 },\r\n    ];\r\n    this.setState({ data: data }, () => {\r\n      console.log('here');\r\n      console.log(this.state.data);\r\n      // console.log(data);\r\n    });\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Rating = 60 + (0.00165 * BPM – 120)^2 + (4.376 * Major) + 0.78 * nChords – (Major * nChords)\r\n */","import React, {Component} from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport Graph from \"react-graph-vis\";\r\nimport { IGraphAreaProps, IGraphAreaState } from '../library/interfaces/IApp';\r\nimport { Network, Node, Edge, Color } from 'vis';\r\nimport { ChartArea } from '../chart-area/ChartArea';\r\nimport { Track, AudioFeatures } from '../library/interfaces/ISpotifyObjects';\r\nimport { SpotifyAdapter } from '../library/spotify-adapter';\r\nimport { dark_node_color, dark_font_color, dark_edge_color, node_color, font_color, edge_color} from '../library/colors/colors';\r\nimport './GraphArea.css';\r\n \r\n// import \"./styles.css\";\r\n// need to import the vis network css in order to show tooltip\r\n// import \"./network.css\";\r\n \r\n\r\n\r\nexport class GraphArea extends Component<IGraphAreaProps, IGraphAreaState> {\r\n  \r\n  constructor(props: IGraphAreaProps) {\r\n    let nodes: Node[] = [];\r\n    let edges: Edge[] = [];\r\n    if (props.tracks) {\r\n      for (let i = 0; i < props.tracks.length; i++) {\r\n        nodes.push({\r\n          id: i + 1,\r\n          label: props.tracks[i].name,\r\n          title: props.tracks[i].name,\r\n          shape: 'dot',\r\n          color: dark_node_color,\r\n          font: dark_font_color\r\n        } as Node);\r\n        if (i > 1) {\r\n          edges.push({\r\n            to: i - 1,\r\n            from: i,\r\n            color: dark_edge_color\r\n          } as Edge);\r\n        }\r\n      }\r\n    }\r\n    super(props);\r\n    this.state = {\r\n      dark: this.props.dark,\r\n      // graph: { nodes: nodes, edges: edges },\r\n      nodes: nodes,\r\n      edges: edges,\r\n      curr_track: this.props.curr_track,\r\n      curr_audio_features: this.props.curr_audio_features,\r\n      tracks: this.props.tracks\r\n    }\r\n  }\r\n \r\n  public _updateCurrTrack(nodes: number[]) {\r\n    console.log(nodes);\r\n    let first: number = nodes[0] - 1\r\n    this.setState({curr_track: this.state.tracks ? this.state.tracks[first] : this.state.curr_track})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='main-container'>\r\n        <div className='graph-container'>\r\n          <Graph\r\n            graph={{nodes: this.state.nodes, edges: this.state.edges}}\r\n            options={{\r\n              layout: {\r\n                improvedLayout: true,\r\n                hierarchical: false\r\n              },\r\n              edges: {\r\n                color: \"#000000\"\r\n              },\r\n              interaction: {\r\n                zoomView: true\r\n              },\r\n              width: \"100%\",\r\n              height: \"100%\"\r\n            }}\r\n            events={{\r\n              selectNode: (event: any) => {\r\n                let { nodes, edges } = event;\r\n                this._updateCurrTrack(nodes);\r\n              }\r\n            }}\r\n            getNetwork={network => {\r\n              this.setState({ network: network })\r\n              //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n            }}\r\n          />\r\n        </div>\r\n        <ChartArea audio_features={this.state.curr_audio_features} track={this.state.curr_track} dark={this.state.dark}/>\r\n      </div>  \r\n    );\r\n  }\r\n\r\n  componentDidUpdate(prevProps: IGraphAreaProps, prevState: IGraphAreaState) {\r\n    console.log('graph updated');\r\n    if (this.state.tracks && this.state.curr_track !== prevState.curr_track) {\r\n      const adapter: SpotifyAdapter = new SpotifyAdapter(this);\r\n      adapter.getAudioFeature(this.state.curr_track!);\r\n    }\r\n    if (this.state.network) {\r\n      console.log('im in the network');\r\n      // console.log(this.state.dark);\r\n      // console.log('state:', this.state);\r\n      // console.log('preprops:', prevProps);\r\n      // console.log('this.props', this.props);\r\n      if (this.state.dark !== this.props.dark) {\r\n        let nodes = this.state.nodes;\r\n        let edges = this.state.edges;\r\n        for (let i = 0; i < nodes.length; i++) {\r\n          nodes[i].color = this.props.dark? dark_node_color: node_color;\r\n          nodes[i].font = this.props.dark? dark_font_color: font_color;\r\n        }\r\n        for (let i = 0; i < edges.length; i++) {\r\n          edges[i].color = this.props.dark? dark_edge_color: edge_color;\r\n        }\r\n        this.setState({ dark: this.props.dark, nodes: nodes, edges: edges }, () => {\r\n          console.log(this.state);\r\n          // this.state.network?.emitter.emit('_dataChanged');\r\n          this.state.network?.setData({ nodes: this.state.nodes, edges: this.state.edges });\r\n          this.state.network?.redraw();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n \r\n// const rootElement = document.getElementById(\"root\");\r\n// ReactDOM.render(<App />, rootElement);\r\n ","import React, {Component} from 'react';\nimport logo from '../../images/logo.svg';\nimport './App.css';\n// import { Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAdjust } from '@fortawesome/free-solid-svg-icons'\n// import { access } from 'fs';\n// import * as icons from '@fortawesome/free-solid-svg-icons';\nimport {IAppProps, IAppState} from '../library/interfaces/IApp'\nimport { SpotifyAdapter } from '../library/spotify-adapter';\nimport { TimeRange } from '../library/enums/enums';\nimport { GraphArea } from '../graph-area/GraphArea';\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      dark: true,\n      query_top_limit: 50,\n      query_top_offset: 0,\n      query_top_timerange: TimeRange.short_term,\n      // tracks: [],\n      // curr_track: null,\n      // curr_audio_features: null\n    };\n  }\n\n  changeTheme = () => {\n    this.setState({ dark: !this.state.dark });\n    // console.log(this.state);\n  }\n\n\n  render() {\n    let appGraphArea;\n    if (this.state.tracks && this.state.curr_audio_features) {\n      appGraphArea = <GraphArea\n        dark={this.state.dark}\n        curr_track={this.state.curr_track}\n        curr_audio_features={this.state.curr_audio_features}\n        tracks={this.state.tracks}/>\n    } else {\n      appGraphArea = <div />\n    }\n    return (\n      <div className=\"App\">\n        <div className={`App-main ${this.state.dark ? 'dark' : ''}`}>\n          <FontAwesomeIcon id=\"dar-mode-btn\" icon={faAdjust} onClick={this.changeTheme} />\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p> */}\n          {/* <a href={auth_url} style={this.state.loggedIn? {pointerEvents: 'none'} : {pointerEvents: 'auto'}}>\n            {this.state.loggedIn? 'Signed In' : 'Sign In'} <FontAwesomeIcon icon={faSignInAlt} />\n          </a> */}\n          {/* <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n          {/* <Button variant=\"primary\" onClick={this.changeTheme}><FontAwesomeIcon icon={faAdjust} /></Button>{' '} */}\n          {/* <GraphArea tracks={this.state.tracks}/> */}\n          {appGraphArea }\n          {/* <GraphArea\n            dark={this.state.dark}\n            curr_track={this.state.curr_track}\n            curr_audio_features={this.state.curr_audio_features}\n            tracks={this.state.tracks}/> */}\n        </div>\n      </div>\n    )\n  }\n  componentDidMount() {\n    const adapter: SpotifyAdapter = new SpotifyAdapter(this);\n    if (adapter.isLoggedIn) {\n      this.setState({ loggedIn: true });\n      // console.log('logged in');\n      // console.log('access_token: ', adapter.access_token);\n      // console.log('token_type: ', adapter.token_type);\n      // console.log('expires_in: ', adapter.expires_in);\n      // console.log('returned_state: ', adapter.returned_state);\n      // console.log('local_state: ', adapter.stored_state);\n      adapter.getTopTracks(this.state.query_top_limit, this.state.query_top_offset, this.state.query_top_timerange);\n\n    } else {\n      console.log('not logged in');\n      adapter.logIn();\n    }\n  }\n  componentDidUpdate(prevProps: IAppProps, prevState: IAppState) {\n    const adapter: SpotifyAdapter = new SpotifyAdapter(this);\n    if (this.state.tracks && this.state.curr_track !== prevState.curr_track) {\n      adapter.getAudioFeature(this.state.curr_track!);\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './components';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <AppRouter /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// function AppRouter() {\n//   return (\n//     <Router>\n//        <Route path=\"/\" exact component={Auth} />\n//        <Route path=\"/web\" component={App} />\n//    </Router>\n//   );\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}