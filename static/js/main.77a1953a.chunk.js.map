{"version":3,"sources":["images/logo.svg","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","state","length","text","possible","i","charAt","Math","floor","random","generateRandomString","localStorage","setItem","auth_url","encodeURIComponent","App","props","changeTheme","setState","dark","loggedIn","className","this","src","logo","alt","href","style","pointerEvents","icon","faSignInAlt","faAdjust","onClick","url_params","URLSearchParams","window","location","hash","replace","access_token","get","token_type","expires_in","returned_state","console","log","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,sOCavCC,EAsEJ,SAA8BC,GAI5B,IAHA,IAAIC,EAAe,GACfC,EAAmB,iEAEdC,EAAY,EAAGA,EAAIH,EAAQG,IAClCF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAE9D,OAAOC,EA7EWO,CAAqB,IACzCC,aAAaC,QAAQ,qBAAsBX,GAC3C,IAAIY,EAAmB,yCACvBA,GAAY,kCAAoCC,mBANxB,oCAMwD,iBAAmBA,mBAJxE,2CAKvB,UAAYA,mBAAmBb,GA4EpBc,M,kDA/Db,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IAORC,YAAc,WACZ,EAAKC,SAAS,CAAEC,MAAO,EAAKlB,MAAMkB,QAPlC,EAAKlB,MAAQ,CACXmB,UAAU,EACVD,MAAM,GAJoB,E,qDAc5B,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAS,qBAAiBC,KAAKrB,MAAMkB,KAAM,GAAK,SACtD,yBAAKI,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,mCACO,6CADP,wBAGA,uBAAGC,KAAMb,EAAUc,MAAOL,KAAKrB,MAAMmB,SAAU,CAACQ,cAAe,QAAU,CAACA,cAAe,SACtFN,KAAKrB,MAAMmB,SAAU,YAAc,UADtC,IACiD,kBAAC,IAAD,CAAiBS,KAAMC,OAWxE,kBAAC,IAAD,CAAiBD,KAAME,IAAUC,QAASV,KAAKL,kB,0CAMrD,IAAIgB,EAAa,IAAIC,gBAAgBC,OAAOC,SAASC,KAAKC,QAAQ,IAAI,MAClEC,EAA8BN,EAAWO,IAAI,gBAC7CC,EAA4BR,EAAWO,IAAI,cAC3CE,EAA4BT,EAAWO,IAAI,cAC3CG,EAAgCV,EAAWO,IAAI,SAEnDI,QAAQC,IAAI,iBAAkBN,GAC9BK,QAAQC,IAAI,eAAgBJ,GAC5BG,QAAQC,IAAI,eAAgBH,GAC5BE,QAAQC,IAAI,mBAAoBF,GAChCrB,KAAKJ,SAAS,CAAEE,WAAUmB,Q,GAlDZO,aCjBEC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.77a1953a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from '../../images/logo.svg';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSignInAlt, faAdjust } from '@fortawesome/free-solid-svg-icons'\nimport { access } from 'fs';\n// import * as icons from '@fortawesome/free-solid-svg-icons';\n\n\nlet client_id: string = '287daee6bafd4ce48e000a00a40d3f6f';\n// let redirect_uri = 'http://96dc3d3968bf.ngrok.io';\nlet redirect_uri: string = 'http://kevinshi97.github.io/spotify-web';\nlet state: string = generateRandomString(16);\nlocalStorage.setItem('spotify_auth_state', state);\nlet auth_url: string = 'https://accounts.spotify.com/authorize';\nauth_url += '?response_type=token&client_id=' + encodeURIComponent(client_id) + '&redirect_uri=' + encodeURIComponent(redirect_uri)\n  + '&state=' + encodeURIComponent(state);\n\n\n  interface IAppProps {\n  }\n  \ninterface IAppState {\n    loggedIn?: boolean\n    dark?: boolean;\n  }\n\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      dark: false,\n    };\n  }\n\n  changeTheme = () => {\n    this.setState({ dark: !this.state.dark });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className={`App-header ${ this.state.dark? '' : 'dark'}`}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          <a href={auth_url} style={this.state.loggedIn? {pointerEvents: 'none'} : {pointerEvents: 'auto'}}>\n            {this.state.loggedIn? 'Signed In' : 'Sign In'} <FontAwesomeIcon icon={faSignInAlt} />\n          </a>\n          {/* <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n          {/* <Button variant=\"primary\" onClick={this.changeTheme}><FontAwesomeIcon icon={faAdjust} /></Button>{' '} */}\n          <FontAwesomeIcon icon={faAdjust} onClick={this.changeTheme}/>\n        </header>\n      </div>\n    )\n  }\n  componentDidMount() {\n    let url_params = new URLSearchParams(window.location.hash.replace(\"#\",\"?\"))\n    let access_token: string | null = url_params.get('access_token');\n    let token_type: string | null = url_params.get('token_type');\n    let expires_in: string | null = url_params.get('expires_in');\n    let returned_state: string | null = url_params.get('state');\n    // console.log(access_token, token_type, expires_in, returned_state);\n    console.log('access_token: ', access_token);\n    console.log('token_type: ', token_type);\n    console.log('expires_in: ', expires_in);\n    console.log('returned_state: ', returned_state);\n    this.setState({ loggedIn: access_token? true : false });\n  }\n}\n\nfunction generateRandomString(length: number): string {\n  let text: string = '';\n  var possible: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (let i: number = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './components';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <AppRouter /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// function AppRouter() {\n//   return (\n//     <Router>\n//        <Route path=\"/\" exact component={Auth} />\n//        <Route path=\"/web\" component={App} />\n//    </Router>\n//   );\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}