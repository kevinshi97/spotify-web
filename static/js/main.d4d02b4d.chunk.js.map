{"version":3,"sources":["components/library/authenticator.ts","components/library/enums/enums.ts","components/library/spotify-adapter.ts","components/app/App.tsx","serviceWorker.ts","index.tsx","images/logo.svg"],"names":["Authenticator","client_id","redirect_uri","scopes","state","this","generateRandomString","auth_url","encodeURIComponent","access_token","token_type","expires_in","returned_state","stored_state","url_params","URLSearchParams","window","location","hash","replace","get","localStorage","getItem","setItem","href","length","text","possible","i","charAt","Math","floor","random","_instance","TimeRange","Passport","Instance","SpotifyAdapter","app","logIn","limit","offset","time_range","medium_term","SpotifyTopRequest","url","console","log","new_url","params","headers","method","fetch","then","res","json","data","setState","isLoggedIn","App","props","changeTheme","dark","loggedIn","query_top_limit","query_top_offset","query_top_timerange","className","src","logo","alt","icon","faAdjust","onClick","adapter","getTopArtists","getTopTracks","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.d4d02b4d.chunk.js","sourcesContent":["class Authenticator {\r\n  /**\r\n   * params to make authentication request\r\n   */\r\n  private static _instance: Authenticator;\r\n  private client_id: string = '287daee6bafd4ce48e000a00a40d3f6f';\r\n  // private redirect_uri: string = 'http://52ebb59eaef3.ngrok.io';\r\n  private redirect_uri: string = 'http://kevinshi97.github.io/spotify-web';\r\n  private scopes: string = 'user-top-read user-follow-read user-library-read';\r\n  private state: string = this.generateRandomString(16);\r\n  private auth_url: string = 'https://accounts.spotify.com/authorize?response_type=token&client_id=' + encodeURIComponent(this.client_id)\r\n    + '&redirect_uri=' + encodeURIComponent(this.redirect_uri) + '&state=' + encodeURIComponent(this.state)\r\n    + '&scope=' + encodeURIComponent(this.scopes);\r\n  \r\n  /**\r\n   * params returned by authentication, may be used in the remaing API calls\r\n   */\r\n  public access_token: string | null = null;\r\n  public token_type: string | null = null;\r\n  public expires_in: string | null = null;\r\n  public returned_state: string | null = null;\r\n  public stored_state: string | null = null;\r\n  \r\n  private constructor() {\r\n    let url_params = new URLSearchParams(window.location.hash.replace(\"#\",\"?\"))\r\n    this.access_token = url_params.get('access_token');\r\n    this.token_type = url_params.get('token_type');\r\n    this.expires_in = url_params.get('expires_in');\r\n    this.returned_state = url_params.get('state');\r\n    this.stored_state = localStorage.getItem('spotify_auth_state')\r\n  }\r\n\r\n  public static get Instance(): Authenticator {\r\n    return this._instance || (this._instance = new this()); \r\n  }\r\n\r\n  public get isLoggedIn(): Boolean {\r\n    return (this.access_token && this.stored_state == this.returned_state) || false;\r\n  }\r\n\r\n  public logIn(): void {\r\n    localStorage.setItem('spotify_auth_state', this.state)\r\n    window.location.href = this.auth_url;\r\n  }\r\n\r\n  private generateRandomString(length: number): string {\r\n    let text: string = '';\r\n    var possible: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  \r\n    for (let i: number = 0; i < length; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  };\r\n\r\n}\r\n\r\nexport const Passport = Authenticator.Instance;","export enum TimeRange {\r\n  short_term = 'short_term',\r\n  medium_term = 'medium_term',\r\n  long_term = 'long_term'\r\n}","import {Component} from 'react';\r\n\r\nimport { Passport } from './authenticator';\r\nimport { IAppProps, IAppState } from './interfaces/app-interfaces';\r\nimport { TimeRange } from './enums/enums';\r\n\r\nexport class SpotifyAdapter {\r\n  public access_token: string | null = null;\r\n  public token_type: string | null = null;\r\n  public expires_in: string | null = null;\r\n  public returned_state: string | null = null;\r\n  public stored_state: string | null = null;\r\n  private app: Component<IAppProps, IAppState>;\r\n\r\n  constructor(app: Component<IAppProps, IAppState>) {\r\n    this.app = app;\r\n    this.access_token = Passport.access_token;\r\n    this.token_type = Passport.token_type;\r\n    this.expires_in = Passport.expires_in;\r\n    this.returned_state = Passport.returned_state;\r\n    this.stored_state = Passport.stored_state;\r\n  }\r\n  public get isLoggedIn(): Boolean {\r\n    return Passport.isLoggedIn;\r\n  }\r\n  public logIn(): void {\r\n    Passport.logIn();\r\n  }\r\n\r\n  public getTopArtists(limit: number = 20, offset: number = 0, time_range: TimeRange = TimeRange.medium_term): void {\r\n    this.SpotifyTopRequest('https://api.spotify.com/v1/me/top/artists?', limit, offset, time_range);\r\n  }\r\n\r\n  public getTopTracks(limit: number = 20, offset: number = 0, time_range: TimeRange = TimeRange.medium_term): void {\r\n    this.SpotifyTopRequest('https://api.spotify.com/v1/me/top/tracks?', limit, offset, time_range);    \r\n  }\r\n\r\n  private SpotifyTopRequest(url: string, limit: number = 20, offset: number = 0, time_range: TimeRange): void {\r\n    if (limit < 1 || limit > 50 || offset < 0 || offset > limit) {\r\n      console.log('invalid params');\r\n    } else {\r\n      let new_url = url + '&limit=' + encodeURIComponent(limit) + '&offset=' + encodeURIComponent(offset) + '&time_range='\r\n        + encodeURIComponent(time_range);\r\n      let params: RequestInit = {\r\n        headers: {'Authorization': 'Bearer ' + this.access_token} as HeadersInit, \r\n        method: 'GET',\r\n      };\r\n      fetch(new_url, params)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n          this.app.setState({ data: data });\r\n          console.log(data);\r\n          console.log(this.app.state); \r\n      })\r\n    }\r\n  }\r\n\r\n}","import React, {Component} from 'react';\nimport logo from '../../images/logo.svg';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSignInAlt, faAdjust, faBatteryQuarter } from '@fortawesome/free-solid-svg-icons'\nimport { access } from 'fs';\n// import * as icons from '@fortawesome/free-solid-svg-icons';\nimport {IAppProps, IAppState} from '../library/interfaces/app-interfaces'\nimport { SpotifyAdapter } from '../library/spotify-adapter';\nimport { TimeRange } from '../library/enums/enums';\n\nclass App extends Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      dark: false,\n      query_top_limit: 50,\n      query_top_offset: 0,\n      query_top_timerange: TimeRange.medium_term\n    };\n  }\n\n  changeTheme = () => {\n    this.setState({ dark: !this.state.dark });\n    console.log(this.state);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className={`App-header ${ this.state.dark? '' : 'dark'}`}>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          {/* <a href={auth_url} style={this.state.loggedIn? {pointerEvents: 'none'} : {pointerEvents: 'auto'}}>\n            {this.state.loggedIn? 'Signed In' : 'Sign In'} <FontAwesomeIcon icon={faSignInAlt} />\n          </a> */}\n          {/* <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n          {/* <Button variant=\"primary\" onClick={this.changeTheme}><FontAwesomeIcon icon={faAdjust} /></Button>{' '} */}\n          <FontAwesomeIcon icon={faAdjust} onClick={this.changeTheme}/>\n        </header>\n      </div>\n    )\n  }\n  componentDidMount() {\n    const adapter: SpotifyAdapter = new SpotifyAdapter(this);\n    if (adapter.isLoggedIn) {\n      this.setState({ loggedIn: true });\n      // console.log('logged in');\n      // console.log('access_token: ', adapter.access_token);\n      // console.log('token_type: ', adapter.token_type);\n      // console.log('expires_in: ', adapter.expires_in);\n      // console.log('returned_state: ', adapter.returned_state);\n      // console.log('local_state: ', adapter.stored_state);\n      adapter.getTopArtists(this.state.query_top_limit, this.state.query_top_offset, this.state.query_top_timerange);\n      adapter.getTopTracks(this.state.query_top_limit, this.state.query_top_offset, this.state.query_top_timerange);\n\n    } else {\n      console.log('not logged in');\n      adapter.logIn();\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './components';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <AppRouter /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// function AppRouter() {\n//   return (\n//     <Router>\n//        <Route path=\"/\" exact component={Auth} />\n//        <Route path=\"/web\" component={App} />\n//    </Router>\n//   );\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}